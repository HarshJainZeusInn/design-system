{"version":3,"file":"component---src-pages-components-radio-usage-mdx-b52c401ffa104be03cb7.js","mappings":"mPAQaA,EAAe,GAEtBC,EAAgB,SAAAC,GAAI,OAAI,SAA6BC,GAEzD,OADAC,QAAQC,KAAK,aAAeH,EAAO,4EAC5B,cAASC,KAGZG,EAAUL,EAAc,WACxBM,EAAON,EAAc,QACrBO,EAAQP,EAAc,SACtBQ,EAAc,CAClBT,aAAAA,GAEIU,EAAYC,EAAAA,EACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGV,GACF,YACD,OAAO,QAACO,EAAD,iBAAeD,EAAiBN,EAAhC,CAAuCU,WAAYA,EAAYC,QAAQ,eAG5E,cACE,GAAM,SADR,UAGA,oBACA,cACE,GAAM,SADR,UAGA,QAACR,EAAD,CAASJ,KAAK,gBAAgBY,QAAQ,aACtC,cACE,GAAM,kBADR,mBAGA,8PACA,QAACR,EAAD,CAASJ,KAAK,uBAAuBY,QAAQ,aAC7C,cACE,GAAM,SADR,UAGA,iEACA,QAACR,EAAD,CAASJ,KAAK,sBAAsBY,QAAQ,aAC5C,oBACA,cACE,GAAM,cADR,eAGA,oBACA,QAACP,EAAD,CAAMQ,OAAO,OAAOD,QAAQ,SAC9B,QAACN,EAAD,CAAOQ,UAAU,EAAOC,WAAW,EAAMC,KAAM,CAAC,CAC1CC,SAAU,QACVC,MAAO,UACPC,aAAc,YACb,CACDF,SAAU,2CACVC,MAAO,MACPC,aAAc,MACZC,OAAQ,CAAC,CACXpB,KAAM,WACNqB,YAAa,WACbC,MAAO,MACPC,SAAS,EACTR,WAAW,GACV,CACDf,KAAM,QACNqB,YAAa,QACbC,MAAO,MACPC,SAAS,EACTR,WAAW,GACV,CACDf,KAAM,eACNqB,YAAa,gBACbC,MAAO,MACPC,SAAS,EACTR,WAAW,IACTS,YAAY,EAAOZ,QAAQ,YAEjC,oBACA,oBACA,cACE,GAAM,SADR,UAGA,oBACA,cACE,GAAM,eADR,gBAGA,kLACA,4EAA8D,kBAAQa,WAAW,MAAI,cAAIA,WAAW,UAAf,QAArF,0BACA,QAACrB,EAAD,CAASJ,KAAK,oBAAoBY,QAAQ,aAC1C,cACE,GAAM,aADR,cAGA,2WACA,QAACR,EAAD,CAASJ,KAAK,2BAA2BY,QAAQ,aACjD,cACE,GAAM,sBADR,uBAGA,8KACA,QAACR,EAAD,CAASJ,KAAK,mBAAmBY,QAAQ,aACzC,cACE,GAAM,qBADR,sBAGA,mBACF,oHACA,+UAEE,oBACA,cACE,GAAM,qBADR,sBAGA,iKACA,oBACA,cACE,GAAM,qBADR,sBAGA,iMACA,iKACA,kBAAG,cAAIa,WAAW,KAAf,4BAKPf,EAAWgB,gBAAiB","sources":["webpack://docs/./src/pages/components/radio/usage.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/harshjain/Documents/innovaccer/projects/design system/design-system/docs/src/components/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Preview = makeShortcode(\"Preview\");\nconst Card = makeShortcode(\"Card\");\nconst Table = makeShortcode(\"Table\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h3 {...{\n      \"id\": \"types\"\n    }}>{`Types`}</h3>\n    <br />\n    <h4 {...{\n      \"id\": \"basic\"\n    }}>{`Basic`}</h4>\n    <Preview name='default-radio' mdxType=\"Preview\" />\n    <h4 {...{\n      \"id\": \"with-help-text\"\n    }}>{`With help text`}</h4>\n    <p>{`The radio button can have a help text below the label to provide some extra information about the particular option. The help text will always be aligned to the label. Clicking over the help text will not change the state of radio. `}</p>\n    <Preview name='radio-with-help-text' mdxType=\"Preview\" />\n    <h3 {...{\n      \"id\": \"sizes\"\n    }}>{`Sizes`}</h3>\n    <p>{`Radio comes in two sizes: Regular and Tiny.`}</p>\n    <Preview name='radio-variants-size' mdxType=\"Preview\" />\n    <br />\n    <h3 {...{\n      \"id\": \"properties\"\n    }}>{`Properties`}</h3>\n    <br />\n    <Card shadow='none' mdxType=\"Card\">\n  <Table showMenu={false} separator={true} data={[{\n        Property: 'Label',\n        Value: '<Label>',\n        Configurable: 'Optional'\n      }, {\n        Property: 'Margin between the control and the label',\n        Value: '8px',\n        Configurable: '❌'\n      }]} schema={[{\n        name: 'Property',\n        displayName: 'Property',\n        width: '50%',\n        sorting: false,\n        separator: true\n      }, {\n        name: 'Value',\n        displayName: 'Value',\n        width: '25%',\n        sorting: false,\n        separator: true\n      }, {\n        name: 'Configurable',\n        displayName: 'Configurable?',\n        width: '25%',\n        sorting: false,\n        separator: true\n      }]} withHeader={false} mdxType=\"Table\" />\n    </Card>\n    <br />\n    <br />\n    <h3 {...{\n      \"id\": \"usage\"\n    }}>{`Usage`}</h3>\n    <br />\n    <h4 {...{\n      \"id\": \"radio-group\"\n    }}>{`Radio group`}</h4>\n    <p>{`Radio group consists of a list of multiple options, with a label on the top. The label should clearly state the grouping category or the action to perform. `}</p>\n    <p>{`*Note: Multiple radio buttons should have a minimum of `}<strong parentName=\"p\"><em parentName=\"strong\">{`8px`}</em></strong>{` spacing in between.*`}</p>\n    <Preview name='radio-radio-group' mdxType=\"Preview\" />\n    <h4 {...{\n      \"id\": \"alignment\"\n    }}>{`Alignment`}</h4>\n    <p>{`The radio buttons in a group can be aligned either vertically or horizontally. However, it is advisable to stack the radio buttons vertically with one option in a line for easier reading and scanning. If you need to use them horizontally, make sure to space the options appropriately so that it is clear which control goes with which label. `}</p>\n    <Preview name='alignment-of-radio-group' mdxType=\"Preview\" />\n    <h4 {...{\n      \"id\": \"overflow-behaviour\"\n    }}>{`Overflow Behaviour`}</h4>\n    <p>{`If the label or the help text with the radio component overflows, wrap it to the next line but make sure that the control and the label are top aligned.`}</p>\n    <Preview name='overflow-content' mdxType=\"Preview\" />\n    <h4 {...{\n      \"id\": \"default-selection\"\n    }}>{`Default Selection`}</h4>\n    <ul>\n  <li>If a radio group is optional to fill, no option from the list should be selected by default. </li>\n  <li>Even if the radio group is mandatory to fill, it is recommended not to have a default option selected in order to avoid submitting that option by mistake. However, if the need arises you have the choice to make an option selected by default. In that case, make sure to select the safest and most likely option. </li>\n    </ul>\n    <br />\n    <h4 {...{\n      \"id\": \"radio-vs-checkbox\"\n    }}>{`Radio vs Checkbox`}</h4>\n    <p>{`Checkboxes allow users to select multiple options whereas radio buttons allow only one selection from a list of mutually exclusive options.`}</p>\n    <br />\n    <h4 {...{\n      \"id\": \"radio-vs-dropdown\"\n    }}>{`Radio vs Dropdown`}</h4>\n    <p>{`Radio buttons are recommended to use when there are fewer than 5 options as it is easier for users to scan and select the appropriate option and save an additional click. `}</p>\n    <p>{`However, if the number of options exceeds 5 or if the space is limited then it is recommended to use dropdowns to better utilize the space.`}</p>\n    <p><em parentName=\"p\">{`image to be made later`}</em></p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","makeShortcode","name","props","console","warn","Preview","Card","Table","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","shadow","showMenu","separator","data","Property","Value","Configurable","schema","displayName","width","sorting","withHeader","parentName","isMDXComponent"],"sourceRoot":""}