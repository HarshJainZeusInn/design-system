{
    "componentChunkName": "component---src-pages-components-progress-indicators-usage-mdx",
    "path": "/components/progressIndicators/usage/",
    "result": {"pageContext":{"frontmatter":{"title":"Progress indicators","description":"Progress indicators are used to show progress of an ongoing process.","tabs":["Usage","Code"],"showMobile":true},"relativePagePath":"/components/progressIndicators/usage.mdx","titleType":"page","MdxNode":{"id":"9a9329c3-8231-516f-8456-2835e61fb494","children":[],"parent":"9bda3725-9185-5a59-806f-f1192748a37b","internal":{"content":"---\ntitle: Progress indicators\ndescription: Progress indicators are used to show progress of an ongoing process.\ntabs: ['Usage', 'Code']\nshowMobile: true\n---\n\nProgress indicator is a key part of any user interface screen. It helps users become aware of the loading progress of different components in the application.\n\n### Types\n\n<br/>\n\n#### Progress bar\n\nGoes from 0 to 100 linearly.\n\n<Preview name='progressbar-fifty-percent'/>\n\n#### Progress Ring\n\nGoes from 0 to 100 along the circumference. It comes in 2 sizes -\n\n<Preview name='switch-default-switch'/>\n\n#### Spinner\n\nSpins endlessly to show indeterminate progress unlike progress bar and ring. Spinner comes in 3 sizes -\n\n**Small** - For inline loaders such as in Buttons.\n**Medium** - For Modals and Cards.\n**Big** - For Page loaders.\n\n<Preview name='switch-default-switch'/>\n\n#### Skeleton Loader\n\nSkeleton loaders are used if there is a defined template for the data that is going to be displayed. This type of loading state should be used for container-based components(like avatars, lists, and so on) and data-based components(like tables).\n\n<Preview name='switch-default-switch'/>\n\n### Usage\n\n<br/>\n\n#### Nature of the process\n\n<br/>\n\n##### Determinate\n\nWhen the time taken to load a process is determinable.\n\n-   Use **Progress Bar** for general determinable processes.\n\n![Showing progress using progress bar](./images/progressindicators-1.png)\n\n<br/>\n\n-   Use **Progress Ring** if the process is contextual to a component\n\n![Showing progress using progress ring](./images/progressindicators-2.png)\n\n<br/>\n\n##### Indeterminate \n\nWhen the time taken to load a process cannot be determined.\n\n-   Use **Skeleton loaders** if there is a defined template for the data that is going to be displayed.\n\n![Showing loading state using skeleton loaders](./images/progressindicators-3.png)\n\n<br/>\n\n-   Use **Spinners** if there is no defined template for the data that is going to be displayed\n\n![Showing loading state using spinner](./images/progressindicators-4.png)\n\n<br/>\n\n-   Use **Spinners** if the process is contextual to a component, e.g. button.\n\n![Showing loading state using spinner in button](./images/progressindicators-5.png)\n\n<br/>\n<br/>\n\n#### Skeleton loaders\n\n<br/>\n\n##### Visual Structure\n\nSkeleton loaders imitate each component of a cell separately at the time of loading, to create a perception of decreased loading time. \n\n![Visual structure of skeleton loaders](./images/progressindicators-6.png)\n\n<br/>\n\n##### Page with Static vs Dynamic Content\n\n![Static vs Dynamic content](./images/progressindicators-7.png)\n\n<br/>\n\n#### Skeleton Loader vs Spinner\n\nA typical process starts with loading the app first. Refer to the table below and  the examples to have a better understanding:\n\n<Card shadow='none'>\n  <Table\n    showMenu={false}\n    separator={true}\n    data={[\n      {\n        Property: 'Loading the app',\n        Value: 'Unpredictable',\n        Configurable: 'Spinner',\n      },\n      {\n        Property: 'Loading page template',\n        Value: 'Predictable',\n        Configurable: 'Skeleton',\n      },\n      {\n        Property: 'Making API Calls',\n        Value: 'Data can be empty',\n        Configurable: 'Spinner',\n      },\n      {\n        Property: 'Making API Calls',\n        Value: 'Data will always be present',\n        Configurable: 'Skeleton',\n      },\n      {\n        Property: 'Searching',\n        Value: 'Data can be empty',\n        Configurable: 'Spinner',\n      },\n      {\n        Property: 'Changing page',\n        Value: 'Data will always be present',\n        Configurable: 'Skeleton',\n      },\n    ]}\n    schema={[\n      {\n        name: 'Property',\n        displayName: 'State',\n        width: '33%',\n        sorting: false,\n        separator: true,\n      },\n      {\n        name: 'Value',\n        displayName: 'Content-type',\n        width: '33%',\n        sorting: false,\n        separator: true\n        \n      },\n      {\n        name: 'Configurable',\n        displayName: 'Loader-type',\n        width: '33%',\n        sorting: false,\n        separator: true\n      },\n    ]}\n    withHeader={false}\n  />\n</Card>\n<br/>\n\n#### Progressive Loading\n\nProgressive loading is a technique that loads the page in chunks i.e. from the simplest view to the most detailed view. Table in the above section demonstrates the step-by-step loading of a page. \n\n\n","type":"Mdx","contentDigest":"8e412de4bd48af11dd7c3586a4286a8f","owner":"gatsby-plugin-mdx","counter":1677},"frontmatter":{"title":"Progress indicators","description":"Progress indicators are used to show progress of an ongoing process.","tabs":["Usage","Code"],"showMobile":true},"exports":{},"rawBody":"---\ntitle: Progress indicators\ndescription: Progress indicators are used to show progress of an ongoing process.\ntabs: ['Usage', 'Code']\nshowMobile: true\n---\n\nProgress indicator is a key part of any user interface screen. It helps users become aware of the loading progress of different components in the application.\n\n### Types\n\n<br/>\n\n#### Progress bar\n\nGoes from 0 to 100 linearly.\n\n<Preview name='progressbar-fifty-percent'/>\n\n#### Progress Ring\n\nGoes from 0 to 100 along the circumference. It comes in 2 sizes -\n\n<Preview name='switch-default-switch'/>\n\n#### Spinner\n\nSpins endlessly to show indeterminate progress unlike progress bar and ring. Spinner comes in 3 sizes -\n\n**Small** - For inline loaders such as in Buttons.\n**Medium** - For Modals and Cards.\n**Big** - For Page loaders.\n\n<Preview name='switch-default-switch'/>\n\n#### Skeleton Loader\n\nSkeleton loaders are used if there is a defined template for the data that is going to be displayed. This type of loading state should be used for container-based components(like avatars, lists, and so on) and data-based components(like tables).\n\n<Preview name='switch-default-switch'/>\n\n### Usage\n\n<br/>\n\n#### Nature of the process\n\n<br/>\n\n##### Determinate\n\nWhen the time taken to load a process is determinable.\n\n-   Use **Progress Bar** for general determinable processes.\n\n![Showing progress using progress bar](./images/progressindicators-1.png)\n\n<br/>\n\n-   Use **Progress Ring** if the process is contextual to a component\n\n![Showing progress using progress ring](./images/progressindicators-2.png)\n\n<br/>\n\n##### Indeterminate \n\nWhen the time taken to load a process cannot be determined.\n\n-   Use **Skeleton loaders** if there is a defined template for the data that is going to be displayed.\n\n![Showing loading state using skeleton loaders](./images/progressindicators-3.png)\n\n<br/>\n\n-   Use **Spinners** if there is no defined template for the data that is going to be displayed\n\n![Showing loading state using spinner](./images/progressindicators-4.png)\n\n<br/>\n\n-   Use **Spinners** if the process is contextual to a component, e.g. button.\n\n![Showing loading state using spinner in button](./images/progressindicators-5.png)\n\n<br/>\n<br/>\n\n#### Skeleton loaders\n\n<br/>\n\n##### Visual Structure\n\nSkeleton loaders imitate each component of a cell separately at the time of loading, to create a perception of decreased loading time. \n\n![Visual structure of skeleton loaders](./images/progressindicators-6.png)\n\n<br/>\n\n##### Page with Static vs Dynamic Content\n\n![Static vs Dynamic content](./images/progressindicators-7.png)\n\n<br/>\n\n#### Skeleton Loader vs Spinner\n\nA typical process starts with loading the app first. Refer to the table below and  the examples to have a better understanding:\n\n<Card shadow='none'>\n  <Table\n    showMenu={false}\n    separator={true}\n    data={[\n      {\n        Property: 'Loading the app',\n        Value: 'Unpredictable',\n        Configurable: 'Spinner',\n      },\n      {\n        Property: 'Loading page template',\n        Value: 'Predictable',\n        Configurable: 'Skeleton',\n      },\n      {\n        Property: 'Making API Calls',\n        Value: 'Data can be empty',\n        Configurable: 'Spinner',\n      },\n      {\n        Property: 'Making API Calls',\n        Value: 'Data will always be present',\n        Configurable: 'Skeleton',\n      },\n      {\n        Property: 'Searching',\n        Value: 'Data can be empty',\n        Configurable: 'Spinner',\n      },\n      {\n        Property: 'Changing page',\n        Value: 'Data will always be present',\n        Configurable: 'Skeleton',\n      },\n    ]}\n    schema={[\n      {\n        name: 'Property',\n        displayName: 'State',\n        width: '33%',\n        sorting: false,\n        separator: true,\n      },\n      {\n        name: 'Value',\n        displayName: 'Content-type',\n        width: '33%',\n        sorting: false,\n        separator: true\n        \n      },\n      {\n        name: 'Configurable',\n        displayName: 'Loader-type',\n        width: '33%',\n        sorting: false,\n        separator: true\n      },\n    ]}\n    withHeader={false}\n  />\n</Card>\n<br/>\n\n#### Progressive Loading\n\nProgressive loading is a technique that loads the page in chunks i.e. from the simplest view to the most detailed view. Table in the above section demonstrates the step-by-step loading of a page. \n\n\n","fileAbsolutePath":"/Users/harshjain/Documents/innovaccer/projects/design system/design-system/docs/src/pages/components/progressIndicators/usage.mdx","__gatsby_resolved":{"frontmatter":{"title":"Progress indicators"}}}}},
    "staticQueryHashes": ["1514734083","227138135","2319071508","2754858070","3057627995","3390246842","345969789","3719803338"]}